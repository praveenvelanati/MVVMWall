#!/bin/sh
#
# An example hook script to verify what is about to be committed.
# Called by "git commit" with no arguments.  The hook should
# exit with non-zero status after issuing an appropriate message if
# it wants to stop the commit.
#
# To enable this hook, rename this file to "pre-commit".

if git rev-parse --verify HEAD >/dev/null 2>&1
then
	against=HEAD
else
	# Initial commit: diff against an empty tree object
	against=$(git hash-object -t tree /dev/null)
fi

# Specify the directory for the hooks.
# We'll use the current one (.githooks)
# hookDir=$(dirname $0)

# Specify the hooks you want to run during
# the pre-commit process:
# "$hookDir/swift-lint-hook.sh"
# && "hookDir/add-your-own-scripts-here"

############################ swift lint start #######################
export PATH=/usr/local/bin:$PATH

SWIFT_LINT=$(which swiftlint)
# echo $SWIFT_LINT

if ! [[ -e "${SWIFT_LINT}" ]]; then
    echo "${SWIFT_LINT} is not installed."
    exit 0
fi

echo "SwiftLint $(${SWIFT_LINT} version)"

if [[ $* == *--all* ]]; then
    # ${SWIFT_LINT} autocorrect
    ${SWIFT_LINT} lint
    exit 0
fi

count=1

# make for .. in work with the shitty spaces in our filenames
OIFS="$IFS"
IFS=$'\n'

# Changed files not added to stage area yet
for file_path in $(git diff --diff-filter=d --name-only | grep ".swift$"); do
    export SCRIPT_INPUT_FILE_$count=$file_path
    count=$((count + 1))
done

# Changed files added to stage area
for file_path in $(git diff --diff-filter=d --name-only --cached | grep ".swift$"); do
    export SCRIPT_INPUT_FILE_$count=$file_path
    count=$((count + 1))
done

# # Newly added untracked files
# for file_path in $(git ls-files --others --exclude-standard | grep ".swift$"); do
#     export SCRIPT_INPUT_FILE_$count=$file_path
#     count=$((count + 1))
# done

if [ "$count" -ne 0 ]; then
    export SCRIPT_INPUT_FILE_COUNT=$count
    # $SWIFT_LINT autocorrect --use-script-input-files --force-exclude
    # $SWIFT_LINT lint --use-script-input-files --force-exclude
	# RESULT=$($SWIFT_LINT lint --quiet --config .swiftlint.yml)
	RESULT=$($SWIFT_LINT lint --use-script-input-files)
	# echo $count
	if [ "$RESULT" == '' ]; then
		printf "SwiftLint Finished Successfully without errors.\n"
		exit 0
	else
		printf "SwiftLint Failed. Please check below:\n"
		while read -r line; do
			i=1
			FILEPATH=$(echo $line | cut -d : -f $i)
			i=$((i + 1))
			L=$(echo $line | cut -d : -f $i)
			i=$((i + 1))
			C=$(echo $line | cut -d : -f $i)
			re='^[0-9]+$'
			if [[ $C =~ $re ]] ; then
   				i=$((i + 1))
			fi
			TYPE=$(echo $line | cut -d : -f $i | cut -c 2-)
			i=$((i + 1))
			MESSAGE=$(echo $line | cut -d : -f $i | cut -c 2-)
			i=$((i + 1))
			DESCRIPTION=$(echo $line | cut -d : -f $i | cut -c 2-)
			i=$((i + 1))
			VARIABLE=$(echo $line | cut -d : -f $i | cut -c 2-)

			RED='\033[0;31m'
			NOCOLOR='\033[0m'
			YELLOW='\033[1;33m'
			ORANGE='\033[0;33m'
			CYAN='\e[36m'
			LIGHTCYAN='\e[96m'
			LIGHTMAGENTA='\e[95m'

			if [[ $C =~ $re ]] ; then
   				printf "type: ${RED}$TYPE${NOCOLOR}\n"
			else
				printf "type: ${YELLOW}$TYPE${NOCOLOR}\n"
			fi

			printf "	filepath: ${LIGHTCYAN}$FILEPATH${NOCOLOR}\n"
			printf "	line: ${CYAN}$L${NOCOLOR}\n"
			printf "	error_type: ${CYAN}$MESSAGE${NOCOLOR}\n"
			printf "	message: ${ORANGE}$DESCRIPTION${NOCOLOR}\n"
			printf "	identifier: ${LIGHTMAGENTA}$VARIABLE${NOCOLOR}\n"

		done <<< "$RESULT"
		# echo '\n Result ----- '
		# echo $RESULT
		exit 1
	fi
else
    echo "No files to lint!"
    exit 0
fi


############################ swift lint end #######################



# If you want to allow non-ASCII filenames set this variable to true.
allownonascii=$(git config --bool hooks.allownonascii)

# Redirect output to stderr.
exec 1>&2

# Cross platform projects tend to avoid non-ASCII filenames; prevent
# them from being added to the repository. We exploit the fact that the
# printable range starts at the space character and ends with tilde.
if [ "$allownonascii" != "true" ] &&
	# Note that the use of brackets around a tr range is ok here, (it's
	# even required, for portability to Solaris 10's /usr/bin/tr), since
	# the square bracket bytes happen to fall in the designated range.
	test $(git diff --cached --name-only --diff-filter=A -z $against |
	  LC_ALL=C tr -d '[ -~]\0' | wc -c) != 0
then
	cat <<\EOF
Error: Attempt to add a non-ASCII file name.

This can cause problems if you want to work with people on other platforms.

To be portable it is advisable to rename the file.

If you know what you are doing you can disable this check using:

  git config hooks.allownonascii true
EOF
	exit 1
fi

# If there are whitespace errors, print the offending file names and fail.
exec git diff-index --check --cached $against --
